#nullable disable
using AppCore.Results;
using AppCore.Results.Bases;
using Business.Models;
using Business.Services;
using DataAccess;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Rendering;
using MVC.Settings;
using System.Security.Claims;
using System.Text;

//Generated by ScaffoldApp.
namespace MVC.Controllers
{
    //[Authorize(Roles = "Admin,User")]
    //[Authorize]
	public class BlogsController : Controller
    {
		/*
        IActionResult
        |
        ActionResult
        |
        ViewResult (View()) - ContentResult (Content()) - EmptyResult - FileContentResult (File()) - HttpResults - JavaScriptResult (JavaScript()) - JsonResult (Json()) - RedirectResults
        */

		// Add service injections here
		private readonly IBlogService _blogService;
        private readonly IUserService _userService;
        private readonly ITagService _tagService;

        public BlogsController(IBlogService blogService, IUserService userService, ITagService tagService)
        {
            _blogService = blogService;
            _userService = userService;
            _tagService = tagService;
        }

        // GET: Blogs
        //[Authorize]
        public IActionResult Index()
        {
            if (User.Identity.IsAuthenticated)
            {
                List<BlogModel> blogList = _blogService.Query().ToList();
                return View(blogList);
            }
            return RedirectToAction("Login", "Users", new { area = "Account" });
        }

        //[Authorize(Roles = "Admin")]
        public IActionResult IndexJson()
        {
            if (User.IsInRole("Admin"))
            {
                var blogList = _blogService.Query().ToList();
                return Json(blogList);
            }
            return new EmptyResult();
        }

        [Authorize(Roles = "Admin")]
        public IActionResult IndexXml()
        {
            var blogList = _blogService.Query().ToList();

            if (blogList == null || blogList.Count == 0) // eğer blogList null veya eleman sayısı 0 ise tamamen boş içerik dön
                return new EmptyResult();

            var xml = "<?xml version=\"1.0\" encoding=\"utf-8\" ?>";
            xml += "<Blogs>";
            foreach (var blogItem in blogList)
            {
                xml += "<Blog>";
                xml += "<Title>" + blogItem.Title + "</Title>";
                xml += "<Content>" + blogItem.Content + "</Content>";
                xml += "<CreateDate>" + blogItem.CreateDateDisplay + "</CreateDate>";
                xml += "<UpdateDate>" + blogItem.UpdateDateDisplay + "</UpdateDate>";
                xml += "<Score>" + blogItem.ScoreDisplay + "</Score>";
                xml += "<User>" + blogItem.UserNameDisplay + "</User>";
                xml += "<Id>" + blogItem.Id + "</Id>";
                xml += "<Guid>" + blogItem.Guid + "</Guid>";
                xml += "</Blog>";
            }
            xml += "</Blogs>";

            // XML verisi dönülürken content type (içerik tipi) application/xml olarak belirtilmeli ve eğer
            // dönen XML verisinde Türkçe karakterlerde bir sorun varsa Encoding.UTF8 parametresi kullanılmalıdır
            return Content(xml, "application/xml", Encoding.UTF8);
        }

        // GET: Blogs/Details/5
        [Authorize]
        public IActionResult Details(int id)
        {
            BlogModel blog = _blogService.Query().SingleOrDefault(b => b.Id == id);
            if (blog == null)
            {
                // 1. yöntem:
                //return NotFound(); // 404 kaynak bulunamadı HTTP Status Code döner
                // 2. yöntem:
                return View("_Error", "Blog not found!");
            }
            return View(blog);
        }

        // GET: Blogs/Create
        [Authorize]
        public IActionResult Create()
        {
            // Add get related items service logic here to set ViewData if necessary and update null parameter in SelectList with these items
            
            //var userId = User.Claims.SingleOrDefault(c => c.Type == ClaimTypes.Sid).Value; 
            //ViewData["UserId"] = new SelectList(_userService.GetList(), "Id", "UserName", userId);
            
            ViewBag.Tags = new MultiSelectList(_tagService.GetList(), "Id", "Name");

            var model = new BlogModel()
            {
                UserId = GetUserId()
            };

            return View(model);
        }

        // /Blogs/GetUserId
        //[NonAction]
        //public int GetUserId()
        private int GetUserId()
        {
            return Convert.ToInt32(User.Claims.SingleOrDefault(c => c.Type == ClaimTypes.Sid).Value);
		}

        // POST: Blogs/Create
        // To protect from overposting attacks, enable the specific properties you want to bind to.
        // For more details, see http://go.microsoft.com/fwlink/?LinkId=317598.
        // Bu aksiyon üzerinden sunucu tarafında validasyon (server side validation) yapılmaktadır.
        [HttpPost]
        [ValidateAntiForgeryToken]
        [Authorize]
        public IActionResult Create(BlogModel blog, IFormFile image)
        {
            if (ModelState.IsValid)
            {
                Result result;

                // imaj yükleme
                result = UpdateImage(blog, image);

                if (result.IsSuccessful)
                {
                    blog.UserId = GetUserId();
                    result = _blogService.Add(blog);
                    if (result.IsSuccessful)
                    {
                        TempData["Message"] = result.Message;

                        // 1. yöntem:
                        //return RedirectToAction("Index");
                        // 2. yöntem:
                        return RedirectToAction(nameof(Index));
                    }
                }

                // Aksiyondan view'a validasyon hatası mesajı taşıma 1. yöntem:
                //ViewBag.CreateMessage = result.Message;
                // Aksiyondan view'a validasyon hatası mesajı taşıma 2. yöntem:
                // result objesinin Message'ı view'da validation summary'e gönderilir
                ModelState.AddModelError("", result.Message);
			}

            // Add get related items service logic here to set ViewData if necessary and update null parameter in SelectList with these items

            // 1. yöntem:
            //ViewData["UserId"] = new SelectList(_userService.GetList(), "Id", "UserName", blog.UserId);
            //ViewBag.Tags = new MultiSelectList(_tagService.GetList(), "Id", "Name", blog.TagIds);

            // 2. yöntem:
            ViewData["UserId"] = new SelectList(_userService.GetList(), "Id", "UserName");
			ViewBag.Tags = new MultiSelectList(_tagService.GetList(), "Id", "Name");

			return View(blog);
        }

        private Result UpdateImage(BlogModel blog, IFormFile image)
        {
            if (image is not null && image.Length > 0)
            {
                #region Dosya uzantı ve boyut validasyonları
                string fileName = image.FileName; // asusrog.jpg
                string extension = Path.GetExtension(fileName); // .jpg

                if (!AppSettings.AcceptedImageExtensions.Split(',').Any(e => e.ToLower().Trim() == extension.ToLower()))
                {
                    return new ErrorResult("Image can't be uploaded because image extension is not in \"" + AppSettings.AcceptedImageExtensions + "\"!");
                }

                // 1 byte = 8 bits
                // 1 kilobyte (Kb) = 1024 bytes 
                // 1 megabyte (Mb) = 1024 kilobytes (Kb) = 1024 * 1024 bytes = 1.048.576 bytes
                double acceptedFileLength = AppSettings.AcceptedImageLength; // MB
                double acceptedFileLengthInBytes = acceptedFileLength * Math.Pow(1024, 2);

                if (image.Length > acceptedFileLengthInBytes)
                {
                    return new ErrorResult("Image can't be uploaded because image file length is greater than " + acceptedFileLength.ToString("N1") + " mega bytes!");
                }
                #endregion

                #region Model içerisindeki Image ve ImageExtension özellikleri güncellenmesi
                using (MemoryStream memoryStream = new MemoryStream())
                {
                    image.CopyTo(memoryStream);
                    blog.Image = memoryStream.ToArray();
                    blog.ImageExtension = extension;
                }
                #endregion
            }

            return new SuccessResult();
        }

        // GET: Blogs/Edit/5
        [Authorize]
        public IActionResult Edit(int id)
        {
            BlogModel blog = _blogService.Query().SingleOrDefault(b => b.Id == id);
            if (blog == null)
            {
                return View("_Error", "Blog not found!");
            }

            if (User.IsInRole("User") && GetUserId() != blog.UserId)
            {
                //return View("_Error", "You don't have permission to edit this blog!");
                TempData["Message"] = "You don't have permission to edit this blog!";
				return RedirectToAction(nameof(Index));
			}

            // Add get related items service logic here to set ViewData if necessary and update null parameter in SelectList with these items
            ViewData["UserId"] = new SelectList(_userService.GetList(), "Id", "UserName", blog.UserId);
            ViewData["Tags"] = new MultiSelectList(_tagService.GetList(), "Id", "Name", blog.TagIds);
            return View(blog);
        }

        // POST: Blogs/Edit
        // To protect from overposting attacks, enable the specific properties you want to bind to.
        // For more details, see http://go.microsoft.com/fwlink/?LinkId=317598.
        // Bu aksiyon üzerinden sunucu tarafında validasyon (server side validation) yapılmaktadır.
        [HttpPost]
        [ValidateAntiForgeryToken]
        [Authorize]
        public IActionResult Edit(BlogModel blog, IFormFile image)
        {
			if (User.IsInRole("User") && GetUserId() != blog.UserId)
			{
				//return View("_Error", "You don't have permission to edit this blog!");
				TempData["Message"] = "You don't have permission to edit this blog!";
				return RedirectToAction(nameof(Index));
			}

			if (ModelState.IsValid)
            {
                Result result = UpdateImage(blog, image);

                if (result.IsSuccessful)
                {
                    if (User.IsInRole("User"))
                        blog.UserId = GetUserId();
                    result = _blogService.Update(blog);
                    if (result.IsSuccessful)
                    {
                        TempData["Message"] = result.Message;
                        return RedirectToAction(nameof(Index));
                    }
                }
                ModelState.AddModelError("", result.Message);
            }
            // Add get related items service logic here to set ViewData if necessary and update null parameter in SelectList with these items
            ViewData["UserId"] = new SelectList(_userService.GetList(), "Id", "UserName", blog.UserId);
            ViewData["Tags"] = new MultiSelectList(_tagService.GetList(), "Id", "Name", blog.TagIds);
            return View(blog);
        }

        // GET: Blogs/Delete/5
        [Authorize]
        public IActionResult Delete(int id)
        {
            var blog = _blogService.Query().SingleOrDefault(b => b.Id == id);
            if (blog is null)
            {
                return View("_Error", "Blog not found!");
            }

			if (User.IsInRole("User") && GetUserId() != blog.UserId)
			{
				//return View("_Error", "You don't have permission to edit this blog!");
				TempData["Message"] = "You don't have permission to edit this blog!";
				return RedirectToAction(nameof(Index));
			}

			var result = _blogService.Delete(id);
            TempData["Message"] = result.Message;
            return RedirectToAction(nameof(Index));
        }

        [Authorize]
        public IActionResult DeleteImage(int blogId)
        {
            _blogService.DeleteImage(blogId);
			return RedirectToAction(nameof(Details), new { id = blogId });
		}
	}
}
