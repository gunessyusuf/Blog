#nullable disable
using Business.Models;
using Business.Services;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;

//Generated by ScaffoldApp.
namespace MVC.Controllers
{
    [Authorize(Roles = "Admin")]
    public class TagsController : Controller
    {
        // Add service injections here
        private readonly ITagService _tagService;

        public TagsController(ITagService tagService)
        {
            _tagService = tagService;
        }

        // GET: Tags
        // en aşağıdaki HttpPost olarak işaretlenmiş Delete action'ında RedirectToAction methoduna
        // route value olarak gönderdiğimiz isDeleteSuccessful parametresini Index action'ında parametre olarak
        // tanımlayıp method içerisinde kullanabiliriz,
        // Index action'ı listeleme için direkt Tags veya Tags/Index olarak çağrıldığından
        // isDeleteSuccessful parametresini nullable tipte ve ilk değerini de null olarak tanımladık ki
        // Tags veya Tags/Index olarak bu action çağrıldığında isDeleteSuccessful parametresi dikkate alınmadan
        // listeleme işlemi gerçekleştirilebilsin,
        // HttpPost olarak işaretlenmiş Delete action'u üzerinden isDeleteSuccessful parametresi true gönderildiğinde
        // işlem başarılı, false gönderildiğinde ise işlem başarısız olarak view'a sonucu göndereceğiz
        //[Authorize] // Identity Cookie var mı diye kontrol eder
        /*[Authorize(Roles = "Admin")]*/ // hem Identity Cookie var mı hem de Identity Cookie'de Admin rolü var mı diye kontrol eder
        [AllowAnonymous]
        public IActionResult Index(bool? isDeleteSuccessful = null)
        {
            // isDeleteSuccessful parametresi üzerinden ViewBag.DeleteMessage'ı atayıp view'da kullanıyoruz
            if (isDeleteSuccessful == true)
                ViewBag.DeleteMessage = "Tag deleted successfully.";

            List<TagModel> tagList = _tagService.GetList();
            return View(tagList);
        }

        // GET: Tags/Details/5
        //[Authorize(Roles = "Admin")]
        public IActionResult Details(int id)
        {
            TagModel tag = _tagService.GetItem(id);
            if (tag == null)
            {
                return View("_Error", "Tag not found!");
            }
            return View(tag);
        }

        // GET: Tags/Create
        //[Authorize(Roles = "Admin")]
        public IActionResult Create()
        {
            // Add get related items service logic here to set ViewData if necessary and update null parameter in SelectList with these items
            return View();
        }

        // POST: Tags/Create
        // To protect from overposting attacks, enable the specific properties you want to bind to.
        // For more details, see http://go.microsoft.com/fwlink/?LinkId=317598.
        // Bu aksiyon üzerinden tarayıcı tarafında validasyon (client side validation) yapılmaktadır.
        [HttpPost]
        [ValidateAntiForgeryToken]
        //[Authorize(Roles = "Admin")]
        public IActionResult Create(TagModel tag)
        {
            if (ModelState.IsValid)
            {
                var result = _tagService.Add(tag);
                if (result.IsSuccessful)
                    return RedirectToAction(nameof(Index));
                ModelState.AddModelError("", result.Message);
            }
            // Add get related items service logic here to set ViewData if necessary and update null parameter in SelectList with these items
            return View(tag);
        }

        // GET: Tags/Edit/5
        //[Authorize(Roles = "Admin")]
        public IActionResult Edit(int id)
        {
            TagModel tag = _tagService.Query().SingleOrDefault(t => t.Id == id);
            if (tag == null)
            {
                return View("_Error", "Tag not found!");
            }
            // Add get related items service logic here to set ViewData if necessary and update null parameter in SelectList with these items
            return View(tag);
        }

        // POST: Tags/Edit
        // To protect from overposting attacks, enable the specific properties you want to bind to.
        // For more details, see http://go.microsoft.com/fwlink/?LinkId=317598.
        // Bu aksiyon üzerinden tarayıcı tarafında validasyon (client side validation) yapılmaktadır.
        [HttpPost]
        [ValidateAntiForgeryToken]
        //[Authorize(Roles = "Admin")]
        public IActionResult Edit(TagModel tag)
        {
            if (ModelState.IsValid)
            {
                var result = _tagService.Update(tag);
                if (result.IsSuccessful)
                    return RedirectToAction(nameof(Index));
                ModelState.AddModelError("", result.Message);
            }
            // Add get related items service logic here to set ViewData if necessary and update null parameter in SelectList with these items
            return View(tag);
        }

        // GET: Tags/Delete/5
        // bu aksiyonda önce tag detayını ilgili Delete view'ına dönüyoruz ki kullanıcı detayı görüp
        // silmek istiyor musunuz sorusuna evet veya hayır diyerek evet derse aşağıdaki HttpPost ile
        // işaretli ancak route tanımı ActionName üzerinden Delete olarak değiştirilmiş
        // DeleteConfirmed aksiyonunu çalıştırabilelim ve silme işlemini bu aksiyonda gerçekleştirebilelim
        //[Authorize(Roles = "Admin")]
        public IActionResult Delete(int id)
        {
            TagModel tag = _tagService.GetItem(id);
            if (tag == null)
            {
                return View("_Error", "Tag not found!");
            }
            return View(tag);
        }

        // POST: Tags/Delete
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        //[Authorize(Roles = "Admin")]
        // ActionName (Delete) action adını (DeleteConfirmed) geçersiz kılarak route üzerinden
        // aksiyonun ActionName ile belirtilen şekilde (Tags/Delete) çağrılmasını sağlar
        public IActionResult DeleteConfirmed(int id)
        {
            var result = _tagService.Delete(id);

            // RedirectToAction methodunda yönlendirilmek istenen action parametre olarak
            // gönderildikten sonra bu action'a parametre olarak gönderilmek istenen 
            // bir değer varsa aşağıdaki şekilde route value parametresi üzerinden gönderilebilir
            return RedirectToAction(nameof(Index), new { isDeleteSuccessful = result.IsSuccessful });
        }
	}
}
