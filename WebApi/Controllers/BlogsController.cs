    #nullable disable
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
    using DataAccess;
using Business.Services;
using Business.Models;

//Generated by ScaffoldApp.
namespace WebApi.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class BlogsController : ControllerBase
    {
        // Add service injections here
        private readonly IBlogService _blogService;

        private readonly ILogger<BlogModel> _logger;

        public BlogsController(IBlogService blogService, ILogger<BlogModel> logger)
        {
            _blogService = blogService;
            _logger = logger;
        }

        // GET: api/Blogs
        [HttpGet]
        public IActionResult Get()
        {
            List<BlogModel> blogList = _blogService.Query().ToList(); // TODO: Add get list service logic here
            //_logger.Log(LogLevel.Error, blogList.Count + " record(s) found.");
            _logger.LogDebug(blogList.Count + " record(s) found.");
            return Ok(blogList); // 200 http status code
        }

        // GET: api/Blogs/5
        [HttpGet("{id}")]
        public IActionResult Get(int id)
        {
            BlogModel blog = _blogService.Query().SingleOrDefault(q => q.Id == id);
			if (blog == null)
            {
                return NotFound("Blog not found!"); // 404
            }
			return Ok(blog); // 200
        }

		// POST: api/Blogs
        // To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754
        [HttpPost]
        public IActionResult Post(BlogModel blog)
        {
            if (ModelState.IsValid)
            {
                var result = _blogService.Add(blog);
                if (result.IsSuccessful)
                {
                    //return Ok(blog);
                    return CreatedAtAction("Get", new { id = blog.Id }, blog);
                }
                ModelState.AddModelError("Message", result.Message);
            }
            return BadRequest(ModelState); // 400 http status code
			
        }

        // PUT: api/Blogs
        // To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754
        [HttpPut]
        public IActionResult Put(BlogModel blog)
        {
            if (ModelState.IsValid)
            {
                var result = _blogService.Update(blog);
                if (result.IsSuccessful)
                {
                    //return Ok(blog);
                    return NoContent();
                }
                ModelState.AddModelError("Message", result.Message);
            }

            return BadRequest(ModelState);
        }

        // DELETE: api/Blogs/5
        [HttpDelete("{id}")]
        public IActionResult Delete(int id)
        {
            _blogService.Delete(id);
            return NoContent();
        }
	}
}
