@model IEnumerable<BlogModel>
@*Generated by ScaffoldApp.*@
@*Model namespace using directive should be added to _ViewImports.cshtml.*@

@{
    ViewData["Title"] = "Blog List";
}

@* <h1>@ViewData["Title"]</h1> *@

@if (TempData["Message"] is not null)
{
    <p class="text-success">
        @TempData["Message"]
    </p>
}

<p>
    <a asp-action="Create">Create New Blog</a>
</p>
<table id="blogs" class="display" style="width:100%">
    <thead>
        <tr>
            <th colspan="7" class="text-bg-secondary text-light">
                @{
                                        @* count değişkeni C# kod bloğu içinde view'a gelen modelin eleman sayısı üzerinden atanır *@
                    string count = "No blogs found!";
                    if (Model is not null && Model.Count() > 0)
                    {
                        count = Model.Count() + (Model.Count() == 1 ? " blog" : " blogs") + " found.";
                    }
                }

                @* yukarıda atanan count değişkeni aşağıda sayfanın herhangi bir yerinde bu şekilde yazdırılır *@
                @count 
            </th>
        </tr>
        <tr>
            <th style="width: 30%;">
                @Html.DisplayNameFor(model => model.Title)
            </th>
            <th style="width: 13%;">
                @Html.DisplayNameFor(model => model.CreateDateDisplay)
            </th>
            <th style="width: 13%;">
                @Html.DisplayNameFor(model => model.UpdateDateDisplay)
            </th>
            <th style="width: 8%;">
                @Html.DisplayNameFor(model => model.ScoreDisplay)
            </th>
            <th style="width: 12%;">
                @Html.DisplayNameFor(model => model.UserNameDisplay)
            </th>
            <th style="width: 5%;">
                @Html.DisplayNameFor(model => model.ImgSrcDisplay)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
		@foreach (var item in Model) {
				<tr>
					<td>
						@Html.DisplayFor(modelItem => item.Title)
					</td>
					<td>
						@Html.DisplayFor(modelItem => item.CreateDateDisplay)
					</td>
					<td>
						@Html.DisplayFor(modelItem => item.UpdateDateDisplay)
					</td>
					<td>
						@Html.DisplayFor(modelItem => item.ScoreDisplay)
					</td>
					<td>
						@Html.DisplayFor(modelItem => item.UserNameDisplay)
					</td>
                    <td>
                        @if (item.ImgSrcDisplay is not null)
                        {
                            <img src="@item.ImgSrcDisplay" class="img-thumbnail" />
                        }
                        else
                        {
                            <i class="fa-regular fa-image" title="No Image"></i>
                        }
                    </td>
                    <td class="text-end">

                        <a asp-action="AddToFavorites" asp-controller="Favorites" asp-route-blogId="@item.Id" style="text-decoration: underline;">Add to Favorites</a>&nbsp;|&nbsp;

                        <a asp-action="Details" asp-route-id="@item.Id" style="text-decoration: underline;">Details</a>&nbsp;|&nbsp;
                        <a asp-action="Edit" asp-route-id="@item.Id" style="text-decoration: underline;">Edit</a>&nbsp;|&nbsp;

                        <!--
                            AlertifyJS Üzerinden Kayıt Silme:
                            Silme işlemi için link'i Tag Helper olarak değil onclick event'ini tanımlayacağımız bir a HTML tag'i olarak oluşturuyoruz.
                        -->
                        @* <a asp-action="Delete" asp-route-id="@item.Id" style="text-decoration: underline;">Delete</a> *@
                        <a href="#" style="text-decoration: underline;" onclick="deleteBlog(@item.Id);">Delete</a>

					</td>
				</tr>
		}
    </tbody>
</table>

@if (User.IsInRole("Admin"))
{
    <p class="text-center">
        @* HTML Helper *@
        @* @Html.ActionLink("Blog List in JSON Format", "IndexJson", "Blogs", null, new { target = "_blank" }) *@
        @* Tag Helper *@
        <a asp-action="IndexJson" target="_blank">Blog List in JSON Format</a>

        <br />
        <a asp-action="IndexXml" target="_blank">Blog List in XML Format</a>
    </p>
}

@section Scripts {
    @*
        DataTables, AlertifyJS, vb. Javascript - CSS kütüphaneleri wwwroot -> lib seçilip fare ile sağ tıklanarak Add -> Client-Side Library
        tıklanıp örneğin DataTables için datatables araması yapılıp çıkan sonuç seçilerek ve DataTables web sitesi (https://datatables.net)
        üzerinden hem kütüphane adı yazımı hem de versiyonu ile doğru kütüphane olduğu kontrol edilerek projeye eklenebilir.
        DataTables kütüphanesi tüm view'larda kullanılmayacağı için _Layout view'ında eklemek yerine
        sadece blog listeleme sayfasında kullanılacağı Views -> Blogs -> Index view'ında Scripts section'ına
        css ve js kütüphaneleri referansları eklenmelidir ve HTML table'ı DataTable'a dönüştürecek jQuery kodları yazılmalıdır.
    *@

    <link href="/lib/datatables/css/jquery.datatables.min.css" rel="stylesheet" /><!-- / ile kök klasör olan wwwroot'a göre ihtiyaç duyulan dosya tanımlanabilir. -->
    <script src="~/lib/datatables/js/jquery.datatables.min.js"></script><!-- ~/ ile de kök klasör olan wwwroot'a göre ihtiyaç duyulan dosya tanımlanabilir. -->

    <script>
        $(function() { // jQuery fonksiyonu: sayfa yüklendikten sonra

            // İngilizce için 1. yöntem:
            // $("#blogs").DataTable();

            // İngilizce için 2. yöntem:
            $("#blogs").DataTable({
                language: {
                    // Eğer data table Türkçe olarak kullanılmak isteniyorsa wwwroot -> json klasörü altına datatablesTurkish.json dosyası kopyalanmalıdır.
                    // Eğer kullanılan metinsel bir dosyada (JSON ve XML de metinsel dosyalardır) Türkçe karakter sorunu varsa dosya Notepad ile açılıp
                    // kodlama (encoding) UTF-8'e değiştirilerek kaydedilmelidir.

                    //url: "/json/datatablesTurkish.json" // uygulamamız İngilizce olduğu için bu kısmı comment'e aldık
                }
            }); // id'si blogs olan table'ı data table'a dönüştür
        });
    </script>



    @*
        AlertifyJS Üzerinden Kayıt Silme:
        Blog silmek için ilgili blogun Delete link'i tıklandığında blogun id'sini aşağıdaki deleteBlog fonksiyonuna
        parametre olarak gönderiyoruz ve AlertifyJS (https://alertifyjs.com) üzerinden bir konfirmasyon pop up'ının çıkmasını sağlıyoruz.
        Eğer kullanıcı evet derse o zaman Blogs controller'ındaki Delete get action'ına silinmek istenen blogun id'sini route değeri olarak ekleyip
        Javascript'te bir sayfanın yönlendirilmesini sağlayan window.location.href'e atıyoruz.
    *@
    <link href="~/lib/alertifyjs/css/alertify.min.css" rel="stylesheet" />
    <script src="~/lib/alertifyjs/alertify.min.js"></script>

    <script>
        function deleteBlog(id) {
            alertify.confirm(
                "Warning!", // pop up'ın başlığı
                "Are you sure you want to delete this blog?", // pop up'taki mesaj
                function () { // kullanıcı Yes butonuna tıkladığında çalışacak fonksiyon
                    window.location.href = "/Blogs/Delete/" + id // silme işlemi için yönlendirdiğimiz Blogs controller'ın Delete get action'ı
                },
                function () { // kullanıcı No butonuna tıkladığında çalışacak fonksiyon
                    //alertify.error("Delete canceled."); // eğer istenirse error fonksiyonu üzerinden hata mesajı, success fonksiyonu üzerinden de
                    // başarılı mesajı kullanıcıya gösterilebilir, burada mesaj göstermeyelim dedik
                }
            ).set('labels', { ok: 'Yes', cancel: 'No' }); // pop up'taki butonların Yes ve No şeklinde özelleştirilmeleri
        }
    </script>
}